#!/usr/bin/env node
var program = require('commander');
var testee = require('../lib/testee');
var _ = require('underscore');
var pkg = require('../package.json');
var fs = require('fs');

var config = {};
var runTests = function (files, params) {
	testee.test(files, params, function (err, stats) {
		var exitCode = (err || (stats && stats.failed)) ? 1 : 0;
		process.exit(exitCode);
	});
}

program.version(pkg.version)
	.usage('[options] <files ...>')
	.description(pkg.description)
	.option('-b, --browser [name]', 'The browser you want to run')
	.option('-l, --launch [name]', 'The test environment you want to use. Currently supports local, browserstack or remote')
	.option('-t, --tunnel [name]', 'The tunneling service provider to use. Currently supports local, localtunnel, browserstack and pagekite')
	.option('-p, --port [port]', 'The port to run the server on')
	.option('-r, --reporter [name]', 'The name of the reporter to use')
	.option('-v, --verbose', 'Writes a log file with debugging information')
	.option('-l, --log [file]', 'If in verbose mode, the name of the logfile to write to')
	.option('-c, --config [file]', 'Use this JSON configuration file')
	.option('-C, --coverage', 'Calculate coverage statistics')
	.option('--timeout [seconds]', 'The per test timeout (in seconds)')
	.parse(process.argv);

if(program.config) {
	config = require(program.config);
}

config = _.extend(config, _.pick(program, 'browser', 'launch', 'tunnel',
	'port', 'verbose', 'log', 'timeout', 'reporter', 'coverage'));

if (program.launch === 'browserstack') {
	program.prompt('Enter your Browserstack username: ', function (username) {
		program.password('Your Browserstack password: ', function (pass) {
			_.extend(config, {
				tunnel : 'localtunnel',
				launch : {
					type : 'browserstack',
					username : username,
					password : pass
				}
			});
			runTests(program.args, config);
			process.stdin.destroy();
		});
	});
} else {
	runTests(program.args, config);
}
