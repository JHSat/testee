#!/usr/bin/env node
var program = require('commander');
var _ = require('lodash');
var path = require('path');

var testee = require('../lib/testee');
var pkg = require('../package.json');
var config = {};

program.version(pkg.version)
  .usage('[options] <files ...>')
  .description(pkg.description)
  .option('-b, --browsers [names]', 'The browser you want to run')
  .option('-p, --port [port]', 'The server port')
  .option('-R, --root [path]', 'The server root path the files are relative to')
  .option('-r, --reporter [name]', 'The name of the reporter to use')
  .option('--reporter-options [options]', 'The reporter specific options (separated by a comma)')
  .option('-c --config [filename]', 'Use a JSON or JS configuration file')
  .option('--coverage', 'Track code coverage and write to console (if not running as server)')
  .option('--timeout [seconds]', 'The per test timeout (in seconds)')
  .option('--delay [ms]', 'The delay (in ms) to wait before reopening the same browser again')
  .option('-s, --server', 'Only run the server')
  .parse(process.argv);

if(program.config) {
  config = require(path.resolve('./', program.config));
}

config = _.extend(config, _.pick(program, 'browsers', 'port', 'root', 'reporter', 'timeout', 'delay', 'coverage', 'server'));

var browsers = _.isArray(config.browsers) ? config.browsers :
  (config.browsers || 'phantom').split(',');

// passing `--coverage` will not instrument node_modules by default
config.coverage = config.coverage !== true ? config.coverage :
  { ignore: [ "node_modules" ] };

if (program.reporterOptions) {
  config.reporterOptions = {};

  var reporterOptionsArrStr = program.reporterOptions.split(",");

  reporterOptionsArrStr.forEach(function (option) {
    var options = option.split("=");
    config.reporterOptions[options[0]] = options[1];
  });
}

if(config.server) {
  testee.server(config);
} else {
  testee.test(program.args, browsers, config)
    .then(function() {
      process.exitCode = 0;
    }, function() {
      process.exitCode = 1;
    });
}
